const addEventToClass=(className,eventName,fn)=>{document.querySelectorAll(className).forEach(el=>{el.addEventListener(eventName,fn)})},handleBackToFocus=e=>{const id=eventId(e);setTimeout(()=>{document.getElementById("memory-container--"+id).dispatchEvent(new Event("focus"))},250)},handleDeleteItem=id=>{id=eventId(id);showConfirmDeleteModal(id)},handleOpenItemLink=id=>{id=eventId(id);focusExistingOrCreateNewPaperTab(global.state.papers[id])},handleOpenItemCodeLink=url=>{url=eventId(url),url=global.state.papers[url].codeLink;focusExistingOrCreateNewCodeTab(url)},handleCopyMarkdownLink=md=>{var id=eventId(md),md=global.state.papers[id].md;copyAndConfirmMemoryItem(id,md,"Markdown link copied!")},handleCopyBibtex=bibtex=>{var id=eventId(bibtex),bibtex=global.state.papers[id].bibtex;copyAndConfirmMemoryItem(id,formatBibtext(bibtex),"Bibtex copied!")},handleCopyPDFLink=pdfLink=>{var id=eventId(pdfLink),pdfLink=global.state.papers[id].pdfLink;copyAndConfirmMemoryItem(id,pdfLink,"Pdf link copied!")},handleAddItemToFavorites=isFavorite=>{var id=eventId(isFavorite),isFavorite=hasClass("memory-container--"+id,"favorite");saveFavoriteItem(id,!isFavorite)},handleTextareaFocus=()=>{textareaFocusEnd(this)},handleMemorySaveEdits=codeLink=>{codeLink.preventDefault();var id=eventId(codeLink),{note,codeLink}=getPaperEdits(id);saveNote(id,note),saveCodeLink(id,codeLink),updatePaperTags(id,"memory-item-tags"),dispatch(findEl(id,"memory-item-edit"),"click"),disable(findEl(id,"memory-item-save-edits"))},handleCancelPaperEdit=paper=>{paper.preventDefault();var id=eventId(paper),paper=global.state.papers[id];val(findEl(id,"form-note-textarea"),paper.note),setHTML(findEl(id,"memory-item-tags"),getTagsOptions(paper)),dispatch(findEl(id,"memory-item-edit"),"click"),disable(findEl(id,"memory-item-save-edits"))},handleTogglePaperEdit=actions=>{actions.preventDefault();var id=eventId(actions);const container=findEl("memory-container--"+id);var codeAndNote=findEl(id,"code-and-note"),editPaper=findEl(id,"extended-item"),tagList=findEl(id,"tag-list"),authors=findEl(id,"memory-authors"),tagEdit=findEl(id,"edit-tags"),actions=findEl(id,"memory-item-actions");const tagSelect2=$(findEl(id,"memory-item-tags"));hasClass(container,"expand-open")?(removeClass(container,"expand-open"),slideDown(codeAndNote,150),slideDown(tagList,150),slideDown(actions,150),slideDown(authors,150),slideUp(editPaper,150),slideUp(tagEdit,150),setTimeout(()=>{tagSelect2.select2("destroy")},500)):(addClass(container,"expand-open"),tagSelect2.select2({...global.select2Options,width:"86%"}),hasClass(container,"has-monitoring")||tagSelect2.on("change",monitorPaperEdits(id,!1)),container.classList.add("has-monitoring"),slideUp(codeAndNote,150),slideUp(tagList,150),slideUp(actions,150),slideUp(authors,150),slideDown(editPaper,150),slideDown(tagEdit,150))},handleMemorySelectChange=sort=>{sort=sort.target.value;global.state.sortKey=sort,sortMemory(),displayMemoryTable(),setMemorySortArrow("down")},handleMemorySortArrow=e=>{"memory-sort-arrow-down"===document.querySelector("#memory-sort-arrow svg").id?setMemorySortArrow("up"):setMemorySortArrow("down"),reverseMemory(),displayMemoryTable()},handleFilterFavorites=()=>{var n=!global.state.showFavorites;if(global.state.showFavorites=n){addClass(findEl("filter-favorites").querySelector("svg"),"favorite"),sortMemory(),global.state.papersList=global.state.papersList.filter(p=>p.favorite),displayMemoryTable(),setMemorySortArrow("down"),findEl("memory-select").innerHTML+='<option value="favoriteDate">Last favoured</option>';n=global.state.papersList.length;setPlaceholder("memory-search",`Search ${n} entries...`)}else{removeClass(findEl("filter-favorites").querySelector("svg"),"favorite"),"favoriteDate"===val("memory-select")&&(val("memory-select","lastOpenDate"),global.state.sortKey="lastOpenDate"),document.querySelector('#memory-select option[value="favoriteDate"]').remove(),sortMemory(),setMemorySortArrow("down"),val("memory-search").trim()?dispatch("memory-search","keypress"):(global.state.papersList=global.state.sortedPapers,displayMemoryTable());const n=global.state.sortedPapers.length;setPlaceholder("memory-search",`Search ${n} entries...`)}},handleMemorySearchKeyPress=allowEmptySearch=>e=>{const query=val("memory-search").trim();query||setTimeout(()=>{style("memory-search-clear-icon","visibility","hidden")},0),(query||allowEmptySearch||"Backspace"===e.key)&&(style("memory-search-clear-icon","visibility","visible"),(query.startsWith("t:")?filterMemoryByTags:query.startsWith("c:")?filterMemoryByCode:filterMemoryByString)(query),displayMemoryTable())},handleMemorySearchKeyUp=backspaceEvent=>{"Backspace"==backspaceEvent.key&&((backspaceEvent=new Event("keypress")).key="Backspace",dispatch("memory-search",backspaceEvent))},handleCancelModalClick=()=>{hideId("confirm-modal")},handleConfirmDeleteModalClick=e=>{const id=findEl("hidden-modal-id").innerHTML,title=global.state.papers[id].title,url=global.state.papers[id].pdfLink;delete global.state.papers[id],chrome.storage.local.set({papers:global.state.papers},()=>{global.state.papersList=Object.values(cleanPapers(global.state.papers)),sortMemory(),displayMemoryTable(),hideId("confirm-modal"),console.log(`Successfully deleted "${title}" (${id}) from PaperMemory`),global.state.currentId===id&&updatePopupPaperNoMemory(url),setPlaceholder("memory-search",`Search ${global.state.papersList.length} entries ...`),addListener("memory-switch","click",handleMemorySwitchClick)})},handleTagClick=query=>{query=query.target.textContent;val("memory-search","t: "+query),dispatch("memory-search","keypress")},handleClearSearch=e=>{val("memory-search",""),dispatch("memory-search","clear-search"),style("memory-search-clear-icon","visibility","hidden")},handleMemorySwitchClick=()=>{(global.state.memoryIsOpen?closeMemory:openMemory)()},handlePopupKeydown=focused=>{var key=focused.key;if(!(["Backspace","Enter","Escape","a","e"].indexOf(key)<0))if(global.state.menuIsOpen)"Escape"===key?(focused.preventDefault(),closeMenu()):"Enter"===key&&document.querySelector("#menu-switch:focus")&&closeMenu();else if(global.state.memoryIsOpen){if("Enter"===key){if(document.querySelector("#filter-favorites:focus"))return void dispatch("filter-favorites","click");if(document.querySelector("#memory-sort-arrow:focus")&&"Enter"===key)return void dispatch("memory-sort-arrow","click")}let id;const paperItem=document.querySelector(".memory-container:focus");if("Escape"!==key){if(!paperItem)return;id=paperItem.id.split("--")[1]}"Backspace"===key?dispatch(findEl(id,"memory-delete"),"click"):"Enter"===key?dispatch(findEl(id,"memory-item-link"),"click"):"Escape"===key?(focused.preventDefault(),paperItem&&hasClass(paperItem,"expand-open")?handleTogglePaperEdit(focused):closeMemory()):"e"===key&&dispatch(findEl(id,"memory-item-edit"),"click")}else if("a"===key){focused=document.querySelectorAll(":focus");if(focused&&focused.length&&Array.from(focused).some(el=>hasClass(el,"noMemoryOnA")))return;global.state.papers&&dispatch("memory-switch","click")}else if("Enter"===key){let focused=document.querySelector(":focus");"memory-switch-open"===focused.id?dispatch("memory-switch","click"):"menu-switch"===focused.id?(dispatch("menu-switch","click"),dispatch("menu-switch","blur")):hasClass(focused,"memory-item-svg-div")&&dispatch(focused,"click")}},handleMenuCheckChange=e=>{const key=e.target.id,checked=findEl(key).checked;chrome.storage.local.set({[key]:checked},function(){console.log(`Settings saved for ${key} (${checked})`)})},handleDownloadMemoryClick=()=>{const now=new Date,date=now.toLocaleDateString().replaceAll("/","."),time=now.toLocaleTimeString().replaceAll(":",".");chrome.storage.local.get("papers",({papers})=>{var version=versionToSemantic(papers.__dataVersion);downloadTextFile(JSON.stringify(papers),`memory-data-${version}-${date}-${time}.json`,"text/json")})},handleDownloadBibtexJsonClick=()=>{const now=new Date,date=now.toLocaleDateString().replaceAll("/","."),time=now.toLocaleTimeString().replaceAll(":",".");chrome.storage.local.get("papers",({papers})=>{var version=versionToSemantic(papers.__dataVersion);delete papers.__dataVersion;var bibtex=Object.keys(papers).reduce((obj,k)=>(obj[k]=formatBibtext(papers[k].bibtex)||"",obj),{});downloadTextFile(JSON.stringify(bibtex),`memory-bibtex-${version}-${date}-${time}.json`,"text/json")})},handleDownloadBibtexPlainClick=()=>{const now=new Date,date=now.toLocaleDateString().replaceAll("/","."),time=now.toLocaleTimeString().replaceAll(":",".");chrome.storage.local.get("papers",({papers:bibtex})=>{var version=versionToSemantic(bibtex.__dataVersion);delete bibtex.__dataVersion;bibtex=Object.values(bibtex).map((v,k)=>{let b=v.bibtex;return b||(b="",console.log(v)),formatBibtext(b)}).join("\n");downloadTextFile(JSON.stringify(bibtex),`memory-bibtex-${version}-${date}-${time}.bib`,"text/plain")})},handleSelectOverwriteFile=()=>{var file=document.getElementById("overwrite-arxivmemory-input").files;!file||file.length<1||(file=file[0],setHTML("overwrite-file-name",file.name),file.name.endsWith(".json")&&(findEl("overwrite-arxivmemory-button").disabled=!1))},handleOverwriteMemory=()=>{var reader,file=document.getElementById("overwrite-arxivmemory-input").files;!file||file.length<1||(file=file[0],(reader=new FileReader).onload=function(e){try{const overwritingPapers=JSON.parse(e.target.result);showId("overwriteFeedback"),setHTML("overwriteFeedback",'<div class="arxivTools-container"><div class="sk-folding-cube"><div class="sk-cube1 sk-cube"></div><div class="sk-cube2 sk-cube"></div><div class="sk-cube4 sk-cube"></div><div class="sk-cube3 sk-cube"></div></div></div>');const overwriteDiv='<div id="overwrite-buttons" class="flex-center-evenly py-3 px-4"> <h4 class="w-100 code-font" style="font-size: 0.9rem;>Be careful, you will not be able to revert this operation. Make sure you have downloaded a backup of your memory before overwriting it.</h4> <div class="flex-center-evenly w-100"><button id="cancel-overwrite">Cancel</button> <button id="confirm-overwrite">Confirm</button></div></div>';setTimeout(async()=>{const{success,message,warning,papersToWrite}=await overwriteMemory(overwritingPapers);var nWarnings;success?(warning?(nWarnings=(warning.match(/<br\/>/g)||[]).length,setHTML("overwriteFeedback",`<h5 class="errorTitle">Done with ${nWarnings} warnings. Confirm overwrite?</h5>`+warning+overwriteDiv)):(style("overwriteFeedback","text-align","center"),setHTML("overwriteFeedback",'<h5 class="mb-0">Data seems valid. Confirm overwrite?</h5>'+overwriteDiv)),addListener("confirm-overwrite","click",handleConfirmOverwrite(papersToWrite,warning)),addListener("cancel-overwrite","click",handleCancelOverwrite)):setHTML("overwriteFeedback",message)},1500)}catch(error){setHTML("overwriteFeedback","<br/><strong>Error:</strong><br/>"+stringifyError(error))}},reader.readAsText(file))},handleConfirmOverwrite=(papersToWrite,warning)=>e=>{setHTML("overwriteFeedback",'<div class="arxivTools-container"><div class="sk-folding-cube"><div class="sk-cube1 sk-cube"></div><div class="sk-cube2 sk-cube"></div><div class="sk-cube4 sk-cube"></div><div class="sk-cube3 sk-cube"></div></div></div>'),setTimeout(async()=>{if(warning)for(const id in papersToWrite){var paper,warnings;papersToWrite.hasOwnProperty(id)&&!id.startsWith("__")&&({paper,warnings}=validatePaper(papersToWrite[id],!1),papersToWrite[id]=paper,console.log(warnings))}await setStorage("papers",papersToWrite),setHTML("overwriteFeedback","<h4>Memory overwritten. Close & Re-open the extension for the update to be effective.</h4>"),val("overwrite-arxivmemory-input","")},700)},handleCancelOverwrite=e=>{hideId("overwriteFeedback"),setHTML("overwriteFeedback",""),val("overwrite-arxivmemory-input","")},handleCustomPDFFunctionSave=()=>{const code=val("customPdfTitleTextarea").trim();try{const fn=eval(code),tested=fn("test","1.2");if("string"!=typeof tested)throw Error("Custom function returns the wrong type:",typeof tested,tested);const savedFeedback='<span style="color: green">Saved!</span>';setHTML("customPdfFeedback",savedFeedback),chrome.storage.local.set({pdfTitleFn:code}),global.state.pdfTitleFn=fn,setTimeout(()=>{setHTML("customPdfFeedback","")},1e3)}catch(error){console.log("setAndHandleCustomPDFFunction error:");const errorFeedback=`<span style="color: red">${error}</span>`;savedFeedback("customPdfFeedback",errorFeedback)}},handleDefaultPDFFunctionClick=()=>{var code=defaultPDFTitleFn.toString();chrome.storage.local.set({pdfTitleFn:code}),global.state.pdfTitleFn=defaultPDFTitleFn,val("customPdfTitleTextarea",code),setHTML("customPdfFeedback",`<span style="color: var(--green)"
        >Saved!</span
    >`),setTimeout(()=>{setHTML("customPdfFeedback","")},1e3)},handlePopupSaveEdits=id=>()=>{var{note,codeLink,favorite}=getPaperEdits(id,!0);updatePaperTags(id,"#popup-item-tags--"+id),saveNote(id,note),saveCodeLink(id,codeLink),saveFavoriteItem(id,favorite),setHTML("popup-feedback-copied","Saved tags, code, note & favorite!"),fadeIn("popup-feedback-copied"),setTimeout(()=>{fadeOut("popup-feedback-copied")},2e3),disable("popup-save-edits--"+id)},handlePopupDeletePaper=id=>()=>{showConfirmDeleteModal(id)},getMemoryItemHTML=paper=>{var addDate=new Date(paper.addDate).toLocaleString().replace(",",""),lastOpenDate=new Date(paper.lastOpenDate).toLocaleString().replace(",",""),displayId=getDisplayId(paper.id),note=paper.note||"",id=paper.id,tags=new Set(paper.tags),tagOptions=getTagsOptions(paper),favoriteClass=paper.favorite?"favorite":"";const titles_edit=`"Edit paper details&#13;&#10;(or press 'e' when this paper is focused,&#13;&#10; i.e. when you navigated to it with 'tab')"`,titles_pdfLink=`"Open ${paper.pdfLink}"`,titles_copyPdfLink='"Copy pdf link"',titles_copyMd='"Copy Markdown-formatted link"',titles_copyBibtext='"Copy Bibtex citation"',titles_visits=`"Number of times you have loaded&#13;&#10;the paper's Page or PDF"`;var codeDiv=`
        <small class="memory-item-faded">
            <span class="memory-code-link"> ${paper.codeLink||""} </span>
        </small>
    `;let noteDiv='<div class="memory-note-div memory-item-faded"></div>';return paper.note&&(noteDiv=`
            <div class="memory-note-div memory-item-faded">
                <span class="note-content-header">Note:</span>
                <span class="note-content">${note}</span>
            </div>
        `),`
        <div
            class="memory-container ${favoriteClass}"
            tabindex="0"
            id="memory-container--${id}"
        >
            <h4
                class="memory-title"
                title="Added ${addDate}&#13;&#10;Last open ${lastOpenDate}"
            >
                <span class="memory-item-favorite">
                    ${tablerSvg("star","",["memory-item-favorite-svg",favoriteClass])}
                </span>
                ${paper.title}
            </h4>
            <div class="my-1 mx-0">
                <small class="tag-list">
                    ${Array.from(tags).map(t=>`<span class="memory-tag" >${t}</span>`).join("")}
                </small>
                <div class="edit-tags p-0" style="display: none">
                    <div class="flex-center-between">
                        <span class="label">Tags:</span>
                        <select
                            class="memory-item-tags"
                            id="memory-item-tags--${id}"
                            multiple="multiple"
                        >
                            ${tagOptions}
                        </select>
                    </div>
                </div>
            </div>
            <small class="memory-authors">${cutAuthors(paper.author)}</small>

            <div class="code-and-note">${codeDiv} ${noteDiv}</div>

            <div class="memory-item-actions flex-center-between mt-2">
                <div class="d-flex align-items-center">
                    <div
                        class="memory-item-edit memory-item-svg-div me-2"
                        title=${titles_edit}
                    >
                        ${tablerSvg("writing","",["memory-icon-svg"])}
                    </div>

                    <small class="memory-item-faded memory-display-id">
                        ${displayId}
                    </small>
                </div>

                <div
                    class="memory-item-link memory-item-svg-div"
                    title=${titles_pdfLink}
                >
                    ${tablerSvg("file-symlink","",["memory-icon-svg"])}
                </div>

                <div
                    class="memory-item-copy-link memory-item-svg-div"
                    title=${titles_copyPdfLink}
                >
                    ${tablerSvg("link","",["memory-icon-svg"])}
                </div>

                <div class="memory-item-md memory-item-svg-div" title=${titles_copyMd}>
                    ${tablerSvg("clipboard-list","",["memory-icon-svg"])}
                </div>

                <div
                    class="memory-item-bibtex memory-item-svg-div"
                    title=${titles_copyBibtext}
                >
                    ${tablerSvg("archive","",["memory-icon-svg"])}
                </div>

                <span style="display: none" class="memory-item-feedback"></span>

                <div title=${titles_visits} class="memory-item-faded memory-visits">
                    Visits: ${paper.count}
                </div>
            </div>

            <div class="extended-item" style="display: none">
                <div class="item-note">
                    <form class="form-note">
                        <div class="flex-center-start">
                            <span class="label">Code:</span>
                            <input
                                type="text"
                                class="form-code-input"
                                value="${paper.codeLink||""}"
                                placeholder="Add link"
                            />
                        </div>
                        <div class="flex-center-start">
                            <span class="label">Note:</span>
                            <textarea
                                rows="2"
                                class="form-note-textarea"
                                placeholder="Anything to note?"
                            >
${note}</textarea
                            >
                        </div>
                        <div class="form-note-buttons">
                            <button
                                class="memory-item-save-edits"
                                type="submit"
                                disabled
                            >
                                Save
                            </button>
                            <button class="cancel-note-form back-to-focus">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="memory-delete" title="Delete from Memory">-</div>
        </div>
    `},getPopupEditFormHTML=paper=>{var id=paper.id,tagOptions=getTagsOptions(paper),note=paper.note||"",displayId=getDisplayId(paper.id);return` <div
        style="max-width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 4px 16px;"
    >
        <div style="width: 100%">
            <div
                style="width: 100%; display: flex; justify-content: space-between; align-items: center;"
            >
                <span class="label">Tags:</span>
                <select
                    id="popup-item-tags--${id}"
                    class="memory-item-tags"
                    multiple="multiple"
                >
                    ${tagOptions}
                </select>
            </div>
            <div
                class="form-note"
                id="popup-form-note--${id}"
                style="width: 100%; display: flex; justify-content: space-between; align-items: center; margin-top: 8px; flex-direction: column;"
            >
                <div class="flex-center-start w-100 mr-0">
                    <span class="label">Code:</span>
                    <input
                        id="popup-form-codeLink--${id}"
                        type="text"
                        class="form-code-input mt-0 noMemoryOnA"
                        value="${paper.codeLink||""}"
                        placeholder="Add link"
                    />
                </div>
                <div class="flex-center-start w-100 mr-0">
                    <span class="label">Note:</span>
                    <textarea
                        rows="2"
                        class="noMemoryOnA popup-form-note-textarea"
                        id="popup-form-note-textarea--${id}"
                        placeholder="Anything to note?"
                    >
${note}</textarea
                    >
                </div>
            </div>
            <div
                style="display: flex; justify-content: space-between; align-items: center"
            >
                <div
                    style="display: flex; justify-content: flex-start; align-items: center"
                >
                    <label class="label" for="checkFavorite">Favorite: </label>
                    <input
                        ${""}
                        class="switch"
                        type="checkbox"
                        id="checkFavorite--${id}"
                        name="checkFavorite"
                        value="checkFavorite"
                    />
                </div>
                <div id="popup-delete-paper" title="Delete paper from Memory">
                    <svg
                        width="25"
                        height="25"
                        viewBox="0 0 24 24"
                        stroke-width="1"
                        fill="none"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke="white"
                    >
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <line x1="4" y1="7" x2="20" y2="7" />
                        <line x1="10" y1="11" x2="10" y2="17" />
                        <line x1="14" y1="11" x2="14" y2="17" />
                        <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
                        <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
                    </svg>
                </div>
                <small id="popup-displayId"> ${displayId} </small>
                <button
                    style="padding: 6px 16px;"
                    disabled
                    class="back-to-focus"
                    id="popup-save-edits--${id}"
                >
                    Save
                </button>
            </div>
        </div>
    </div>`},getPopupPaperIconsHTML=(paper,currentUrl)=>{var id=paper.id;return` <div
            tabindex="0"
            class="memory-item-svg-div"
            id="popup-memory-item-link--${id}"
            title="Open Paper ${paperToAbs(paper)===currentUrl?"HTML":"PDF"} Page"
        >
            ${tablerSvg("external-link","",["popup-click-svg"])}
        </div>
        <div
            tabindex="0"
            class="memory-item-svg-div"
            id="popup-memory-item-copy-link--${id}"
            title="Copy pdf link"
        >
            ${tablerSvg("link","",["popup-click-svg"])}
        </div>

        <div
            tabindex="0"
            class="memory-item-svg-div"
            id="popup-memory-item-md--${id}"
            title="Copy Markdown-formatted link"
        >
            ${tablerSvg("clipboard-list","",["popup-click-svg"])}
        </div>

        <div
            tabindex="0"
            class="memory-item-svg-div"
            id="popup-memory-item-bibtex--${id}"
            title="Copy Bibtex citation"
        >
            ${tablerSvg("archive","",["popup-click-svg"])}
        </div>

        <div
            tabindex="0"
            class="memory-item-svg-div"
            id="popup-memory-item-download--${id}"
            title="Download pdf"
        >
            ${tablerSvg("file-download","",["popup-click-svg"])}
        </div>`},getTagsOptions=paper=>{const tags=new Set(paper.tags);return Array.from(global.state.paperTags).sort().map((t,i)=>{let h=`<option value="${t}"`;return tags.has(t)&&(h+=' selected="selected" '),h+`>${t}</option>`}).join("")},updateAllMemoryPaperTagOptions=()=>{for(const id in global.state.papers){var paper;global.state.papers.hasOwnProperty(id)&&"__dataVersion"!==id&&(paper=global.state.papers[id],setHTML("memory-item-tags--"+id,getTagsOptions(paper)))}},updatePopupPaperNoMemory=url=>{let noMemoryHTML=`
        <div style="font-size: 1.5rem; width: 100%; text-align: center;">
            This paper is not in your memory
        </div>
        <ul>
            It can be for one of 4 reasons:
            <li style="margin-top: 4px">
                On Firefox, content scripts are not triggered on pdfs.
                <ul>
                    <li>
                        This is not something I can do anything about, it's a known
                        issue but a design choice by Firefox's developers.
                    </li>
                    <li>
                        The extension would work on the paper's <i>page</i> (for
                        instance arxiv.org/<strong>abs</strong>/1106.0245)
                    </li>
                </ul>
            </li>
            <li style="margin-top: 4px">
                You deleted the paper (refresh the page to add it back)
            </li>
            <li style="margin-top: 4px">
                There was an error parsing the paper's data (you can check the console
                if you think this is an issue)
            </li>
            <li style="margin-top: 4px">
                You are actually not on a paper page but the extension made a mistake
            </li>
            <p style="font-size: 0.9rem">
                Open an issue on
                <a href="https://github.com/vict0rsch/PaperMemory/issues">Github</a> if
                you think you encountered a malfunction.
            </p>
        </ul>
    `;-1<navigator.userAgent.search("Firefox")&&(noMemoryHTML+='<div id="manual-firefox">Try manual trigger</div>');const previousIsArxiv=findEl("isArxiv").innerHTML;setHTML("isArxiv",noMemoryHTML),-1<navigator.userAgent.search("Firefox")&&addListener("manual-firefox","click",async()=>{var isKnownPage=isPaper(url),paper=(await addOrUpdatePaper(url,isKnownPage))["paper"];console.log("paper: ",paper),console.log("previousIsArxiv: ",previousIsArxiv),console.log("url: ",url);isKnownPage=Object.values(isKnownPage).some(i=>i);console.log("isKnownPage: ",isKnownPage),paper&&(setHTML("isArxiv",previousIsArxiv),popupMain(url,isKnownPage,!0))})},showConfirmDeleteModal=id=>{var title=global.state.papers[id].title;setTextId("delete-modal-title",title),setHTML("hidden-modal-id",id),showId("confirm-modal","flex")},copyAndConfirmMemoryItem=(id,textToCopy,feedbackText,isPopup)=>{copyTextToClipboard(textToCopy);const element=isPopup?findEl("popup-feedback-copied"):findEl(id,"memory-item-feedback");element&&(element.innerText=feedbackText,$(element).fadeIn(),setTimeout(()=>{$(element).fadeOut()},2e3))},focusExistingOrCreateNewCodeTab=codeLink=>{var origin=new URL(codeLink)["origin"];chrome.tabs.query({url:origin+"/*"},tabs=>{for(const tab of tabs)if(tab.url.includes(codeLink)){const tabUpdateProperties={active:!0},windowUpdateProperties={focused:!0};return void chrome.windows.getCurrent(w=>{w.id!==tab.windowId?chrome.windows.update(tab.windowId,windowUpdateProperties,()=>{chrome.tabs.update(tab.id,tabUpdateProperties)}):chrome.tabs.update(tab.id,tabUpdateProperties)})}chrome.tabs.create({url:codeLink})})},focusExistingOrCreateNewPaperTab=paper=>{var hostname=parseUrl(paper.pdfLink).hostname;let match=paper.pdfLink.split("/").reverse()[0].replace("-Paper.pdf","").replace(".pdf","").split("?").reverse()[0];"biorxiv"===paper.source&&(match=cleanBiorxivURL(paper.pdfLink)),match.match(/\d{5}v\d+$/)&&"arxiv"===paper.source&&(match=match.split("v")[0]),chrome.tabs.query({url:`*://${hostname}/*`},tabs=>{let validTabsIds=[],pdfTabsIds=[];let idx=0;for(const u of tabs.map(t=>t.url))0<=u.indexOf(match)&&(validTabsIds.push(idx),u.endsWith(".pdf")&&pdfTabsIds.push(idx)),idx+=1;if(0<validTabsIds.length){let tab;tab=0<pdfTabsIds.length?tabs[pdfTabsIds[0]]:tabs[validTabsIds[0]];const tabUpdateProperties={active:!0},windowUpdateProperties={focused:!0};chrome.windows.getCurrent(w=>{w.id!==tab.windowId?chrome.windows.update(tab.windowId,windowUpdateProperties,()=>{chrome.tabs.update(tab.id,tabUpdateProperties)}):chrome.tabs.update(tab.id,tabUpdateProperties)})}else chrome.tabs.create({url:paper.pdfLink});global.state.papers[paper.id].count+=1,chrome.storage.local.set({papers:global.state.papers})})},saveNote=(id,note)=>{note=note.trim(),global.state.papers[id].note=note,chrome.storage.local.set({papers:global.state.papers},()=>{setHTML(findEl(id,"memory-note-div"),note?` <div class="memory-note-div memory-item-faded">
                      <span class="note-content-header">Note:</span>
                      <span class="note-content">${note}</span>
                  </div>`:'<div class="memory-note-div memory-item-faded"></div>');var textarea=findEl("popup-form-note-textarea--"+id);val(textarea,note),val(findEl(id,"form-note-textarea"),note)})},saveCodeLink=(id,codeLink)=>{codeLink=codeLink.trim(),global.state.papers[id].codeLink=codeLink,chrome.storage.local.set({papers:global.state.papers},()=>{setHTML(findEl(id,"memory-code-link"),codeLink),setHTML("popup-code-link",codeLink),val(findEl(id,"form-code-input"),codeLink),(codeLink?showId:hideId)("popup-code-link");var codeInput=findEl("popup-form-codeLink--"+id);val(codeInput,codeLink)})},saveFavoriteItem=(id,favorite)=>{global.state.papers[id].favorite=favorite,global.state.papers[id].favoriteDate=(new Date).toJSON(),chrome.storage.local.set({papers:global.state.papers},()=>{var n,memSearch;favorite?(addClass("memory-container--"+id,"favorite"),addClass(findEl(id,"memory-item-favorite").querySelector("svg"),"favorite")):(removeClass("memory-container--"+id,"favorite"),removeClass(findEl(id,"memory-item-favorite").querySelector("svg"),"favorite")),"favoriteDate"===global.state.sortKey&&(favorite||(sortMemory(),displayMemoryTable()),n=global.state.sortedPapers.filter(p=>p.favorite).length,(memSearch=findEl("memory-search"))&&setPlaceholder(memSearch,`Search ${n} entries`));let checkFavorite=findEl("checkFavorite--"+id);checkFavorite&&(checkFavorite.checked=favorite)})},setMemorySortArrow=direction=>{let arrow;arrow="up"===direction?`<svg
            viewBox="0 0 24 24"
            class="memory-sort-arrow-svg"
            id="memory-sort-arrow-up"
        >
            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
            <line x1="12" y1="5" x2="12" y2="19" />
            <line x1="16" y1="9" x2="12" y2="5" />
            <line x1="8" y1="9" x2="12" y2="5" />
        </svg>`:`<svg
            class="memory-sort-arrow-svg"
            id="memory-sort-arrow-down"
            viewBox="0 0 24 24"
        >
            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
            <line x1="12" y1="5" x2="12" y2="19" />
            <line x1="16" y1="15" x2="12" y2="19" />
            <line x1="8" y1="15" x2="12" y2="19" />
        </svg>`,setHTML("memory-sort-arrow",arrow)},orderPapers=(paper1,paper2)=>{let val1=paper1[global.state.sortKey],val2=paper2[global.state.sortKey];return void 0===val1&&(val1=""),void 0===val2&&(val2=""),"string"==typeof val1&&(val1=val1.toLowerCase(),val2=val2.toLowerCase()),0<=global.descendingSortKeys.indexOf(global.state.sortKey)?val1>val2?-1:1:val1>val2?1:-1},sortMemory=()=>{global.state.sortedPapers=Object.values(cleanPapers(global.state.papers)),global.state.sortedPapers.sort(orderPapers),global.state.papersList.sort(orderPapers)},reverseMemory=()=>{global.state.sortedPapers.reverse(),global.state.papersList.reverse()},filterMemoryByString=letters=>{const words=letters.split(" ");let papersList=[];for(const paper of global.state.sortedPapers){const title=paper.title.toLowerCase(),author=paper.author.toLowerCase(),note=paper.note.toLowerCase(),displayId=getDisplayId(paper.id).toLowerCase();words.every(w=>title.includes(w)||author.includes(w)||note.includes(w)||displayId.includes(w))&&(global.state.showFavorites&&!paper.favorite||papersList.push(paper))}global.state.papersList=papersList},filterMemoryByTags=letters=>{const tags=letters.replace("t:","").toLowerCase().split(" ");let papersList=[];for(const paper of global.state.sortedPapers){const paperTags=paper.tags.map(t=>t.toLowerCase());tags.every(t=>paperTags.some(pt=>0<=pt.indexOf(t)))&&(global.state.showFavorites&&!paper.favorite||papersList.push(paper))}global.state.papersList=papersList},filterMemoryByCode=letters=>{const words=letters.replace("c:","").toLowerCase().split(" ");let papersList=[];for(const paper of global.state.sortedPapers){let paperCode=paper.codeLink||"";paperCode=paperCode.toLowerCase(),words.every(w=>paperCode.includes(w))&&(global.state.showFavorites&&!paper.favorite||papersList.push(paper))}global.state.papersList=papersList},updatePaperTagsHTML=id=>{setHTML(findEl(id,"tag-list"),global.state.papers[id].tags.map(t=>`<span class="memory-tag">${t}</span>`).join(""))},updateTagOptions=id=>{updateAllMemoryPaperTagOptions();var tagOptions=getTagsOptions(global.state.papers[id]);setHTML("popup-item-tags--"+id,tagOptions)},updatePaperTags=(id,tags)=>{let ref;ref=tags.startsWith("#")?findEl(tags.replace("#","")):findEl(id,tags);tags=parseTags(ref);updated=!1;new Set;arraysIdentical(global.state.papers[id].tags,tags)||(updated=!0),global.state.papers[id].tags=tags,updated&&chrome.storage.local.set({papers:global.state.papers},()=>{makeTags(),updateTagOptions(id),updatePaperTagsHTML(id);for(const el of Array.from(findEl(id,"tag-list").querySelectorAll(".memory-tag")))addListener(el,"click",handleTagClick)})},makeTags=()=>{let tags=new Set;for(const p of global.state.sortedPapers)for(const t of p.tags)tags.add(t);global.state.paperTags=Array.from(tags),global.state.paperTags.sort()},displayMemoryTable=()=>{Date.now();var memoryTable=findEl("memory-table");setHTML(memoryTable,"");let table=[];for(const paper of global.state.papersList)try{table.push(getMemoryItemHTML(paper))}catch(error){console.log("displayMemoryTable error:"),console.log(error),console.log(paper)}setHTML(memoryTable,table.join(""));Date.now();addEventToClass(".back-to-focus","click",handleBackToFocus),addEventToClass(".memory-delete","click",handleDeleteItem),addEventToClass(".memory-item-link","click",handleOpenItemLink),addEventToClass(".memory-code-link","click",handleOpenItemCodeLink),addEventToClass(".memory-item-md","click",handleCopyMarkdownLink),addEventToClass(".memory-item-bibtex","click",handleCopyBibtex),addEventToClass(".memory-item-copy-link","click",handleCopyPDFLink),addEventToClass(".memory-item-favorite","click",handleAddItemToFavorites),addEventToClass(".cancel-note-form","click",handleCancelPaperEdit),addEventToClass(".memory-item-edit","click",handleTogglePaperEdit),addEventToClass(".memory-tag","click",handleTagClick),setFormChangeListener(void 0,!1),addEventToClass(".form-note-textarea","focus",handleTextareaFocus),addEventToClass(".form-note","submit",handleMemorySaveEdits);Date.now()},makeMemoryHTML=async()=>{var tstart=Date.now()/1e3;setPlaceholder("memory-search",`Search ${global.state.papersList.length} entries ...`);var tend=Date.now()/1e3;displayMemoryTable();let delayTime=300;global.state.papersList.length<20?delayTime=0:global.state.papersList.length<100&&(delayTime=150);var tevents=Date.now()/1e3;console.log("Time to display table (s):"+(tevents-tend)),addListener("memory-search","keypress",delay(handleMemorySearchKeyPress(),delayTime)),addListener("memory-search","clear-search",handleMemorySearchKeyPress(!0)),addListener("memory-search","keyup",handleMemorySearchKeyUp),addListener("cancel-modal-button","click",handleCancelModalClick),addListener("confirm-modal-button","click",handleConfirmDeleteModalClick),addListener("filter-favorites","click",handleFilterFavorites),addListener("memory-select","change",handleMemorySelectChange),addListener("memory-sort-arrow","click",handleMemorySortArrow);tend=Date.now()/1e3;console.log("Time to add events listeners (s):"+(tend-tevents)),console.log("Total time to make (async) (s):"+(tend-tstart))},openMemory=()=>{global.state.menuIsOpen&&closeMenu(),global.state.memoryIsOpen=!0,hideId("memory-switch-open"),showId("memory-switch-close"),hideId("menu-switch"),dispatch("memory-switch","blur"),slideDown("memory-container",200,()=>{setTimeout(()=>{dispatch("memory-search","focus")},100)}),setTimeout(()=>{addListener("memory-search-clear-icon","click",handleClearSearch),val("memory-select","lastOpenDate"),setMemorySortArrow("down")},200)},closeMemory=()=>{dispatch("memory-switch","blur"),hideId("memory-switch-close"),showId("memory-switch-open"),slideUp("memory-container",200,()=>{val("memory-search",""),dispatch("memory-search","clear-search"),global.state.memoryIsOpen=!1,global.state.showFavorites&&dispatch("filter-favorites","click"),showId("menu-switch","flex")})},closeMenu=()=>{slideUp("menu-container",300),setHTML("menu-switch",tablerSvg("settings","menu-switch-svg",["tabler-icon","menu-svg"])),dispatch("menu-switch","blur"),global.state.menuIsOpen=!1},openMenu=()=>{slideDown("menu-container",300),dispatch("menu-switch","blur"),setHTML("menu-switch",tablerSvg("circle-x","close-menu-btn",["tabler-icon","menu-svg"])),global.state.menuIsOpen=!0},getAndTrackPopupMenuChecks=(menu,menuCheckNames)=>{let setValues={};for(const key of menuCheckNames){setValues[key]=menu.hasOwnProperty(key)?menu[key]:!(0<=global.menuCheckDefaultFalse.indexOf(key));const el=findEl(key);el&&(el.checked=setValues[key])}chrome.storage.local.set(setValues);for(const key of menuCheckNames)addListener(key,"change",handleMenuCheckChange)},setStandardPopupClicks=()=>{addListener("helpGithubLink","click",()=>{chrome.tabs.create({url:"https://github.com/vict0rsch/PaperMemory"})}),addListener("whats-new-container","click",()=>{hideId("modal-keyboard-content"),showId("modal-whatsnew-content","contents"),chrome.storage.local.get("whatsnew",({whatsnew})=>{var version=chrome.runtime.getManifest().version;(whatsnew=void 0===whatsnew?{}:whatsnew).hasOwnProperty(version)||hideId("whats-new-marker"),chrome.storage.local.set({whatsnew:{...whatsnew,[version]:!0}}),style("user-guide-modal","display","flex")})}),addListener("keyboardShortcuts","click",()=>{hideId("modal-whatsnew-content"),showId("modal-keyboard-content","contents"),style("user-guide-modal","display","flex")}),addListener("keyboardShortcutsMenu","click",()=>{hideId("modal-whatsnew-content"),showId("modal-keyboard-content","contents"),style("user-guide-modal","display","flex")}),addListener("close-user-guide-modal","click",()=>{style("user-guide-modal","display","none")}),addListener(window,"click",event=>{event.target===findEl("user-guide-modal")&&style("user-guide-modal","display","none")}),addListener("menu-switch","click",()=>{(global.state.menuIsOpen?closeMenu:openMenu)()}),addListener("memory-switch","click",handleMemorySwitchClick),addListener("download-arxivmemory","click",handleDownloadMemoryClick),addListener("download-bibtex-json","click",handleDownloadBibtexJsonClick),addListener("download-bibtex-plain","click",handleDownloadBibtexPlainClick),addListener("overwrite-arxivmemory-button","click",handleOverwriteMemory),addListener("overwrite-arxivmemory-input","change",handleSelectOverwriteFile)},setAndHandleCustomPDFFunction=menu=>{menu.pdfTitleFn&&"string"==typeof menu.pdfTitleFn&&(global.state.pdfTitleFn=getPdfFn(menu.pdfTitleFn)),chrome.storage.local.set({pdfTitleFn:global.state.pdfTitleFn.toString()}),val("customPdfTitleTextarea",global.state.pdfTitleFn.toString()),addListener("saveCustomPdf","click",handleCustomPDFFunctionSave),addListener("defaultCustomPdf","click",handleDefaultPDFFunctionClick)},popupMain=async(url,eid,menu=!1)=>{addListener(document,"keydown",handlePopupKeydown),chrome.storage.local.get("whatsnew",({whatsnew})=>{var version=chrome.runtime.getManifest().version;whatsnew&&whatsnew.hasOwnProperty(version)||showId("whats-new-marker")}),menu?(hideId("memory-switch"),showId("memory-spinner"),await initState(),hideId("memory-spinner"),showId("memory-switch"),makeMemoryHTML()):setStandardPopupClicks();menu=await getStorage(global.menuStorageKeys);if(getAndTrackPopupMenuChecks(menu,global.menuCheckNames),setAndHandleCustomPDFFunction(menu),eid){setTimeout(()=>{document.body.style.height="auto",document.body.style.minHeight="450px"},0),showId("isArxiv","flex");const id=parseIdFromUrl(url);if(global.state.currentId=id,!global.state.papers.hasOwnProperty(id))return console.log("Unknown id "+id),updatePopupPaperNoMemory(url),void(menu.checkDirectOpen&&dispatchEvent("memory-switch","click"));const paper=global.state.papers[id];eid=paper.id.replaceAll(".","\\.");setTextId("popup-paper-title",paper.title.replaceAll("\n","")),setTextId("popup-authors",paper.author.replaceAll(" and ",", ")),paper.codeLink&&(showId("popup-code-link"),setTextId("popup-code-link",paper.codeLink)),console.log(paper),setHTML("popup-memory-edit",getPopupEditFormHTML(paper)),setHTML("popup-copy-icons",getPopupPaperIconsHTML(paper,url)),findEl("checkFavorite--"+id).checked=paper.favorite,$("#popup-item-tags--"+eid).select2({...global.select2Options,width:"87%"}),addListener("popup-form-note-textarea--"+id,"focus",()=>{textareaFocusEnd(this)}),setFormChangeListener(id,!0),addListener("popup-save-edits--"+id,"click",handlePopupSaveEdits(id)),addListener("popup-delete-paper","click",handlePopupDeletePaper(id)),addListener("popup-memory-item-link--"+id,"click",()=>{chrome.tabs.update({url:(paperToPDF(paper)===url?paperToAbs:paperToPDF)(paper)}),window.close()}),addListener("popup-code-link","click",()=>{var codeLink=findEl("popup-code-link").textContent;codeLink&&focusExistingOrCreateNewCodeTab(codeLink)}),addListener("popup-memory-item-copy-link--"+id,"click",()=>{var pdfLink=global.state.papers[id].pdfLink;copyAndConfirmMemoryItem(id,pdfLink,"Pdf link copied!",!0)}),addListener("popup-memory-item-md--"+id,"click",()=>{var md=global.state.papers[id].md;copyAndConfirmMemoryItem(id,md,"MarkDown link copied!",!0)}),addListener("popup-memory-item-bibtex--"+id,"click",()=>{var bibtex=formatBibtext(global.state.papers[id].bibtex);copyAndConfirmMemoryItem(id,bibtex,"Bibtex citation copied!",!0)}),addListener("popup-memory-item-download--"+id,"click",()=>{let pdfTitle=statePdfTitle(paper.title,paper.id);console.log({pdfTitle:pdfTitle}),chrome.downloads.download({url:paper.pdfLink,filename:pdfTitle.replaceAll(":","_")})})}else menu.checkDirectOpen&&dispatch("memory-switch","click")},query={active:!0,lastFocusedWindow:!0};chrome.tabs.query(query,async isKnownPage=>{var url=isKnownPage[0].url,isKnownPage=isPaper(url),isKnownPage=Object.values(isKnownPage).some(i=>i);isKnownPage||showId("notArxiv"),await initState(),hideId("memory-spinner"),showId("memory-switch"),makeMemoryHTML(),popupMain(url,isKnownPage),-1<navigator.userAgent.search("Firefox")&&hideId("overwrite-container")});