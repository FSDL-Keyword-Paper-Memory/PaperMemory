const addEventToClass=(e,t,o)=>{document.querySelectorAll(e).forEach(e=>{e.addEventListener(t,o)})},handleBackToFocus=e=>{const t=eventId(e);setTimeout(()=>{document.getElementById(`memory-container--${t}`).dispatchEvent(new Event("focus"))},250)},handleDeleteItem=e=>{const t=eventId(e);showConfirmDeleteModal(t)},handleOpenItemLink=e=>{const t=eventId(e);focusExistingOrCreateNewPaperTab(global.state.papers[t])},handleOpenItemCodeLink=e=>{const t=eventId(e),o=global.state.papers[t].codeLink;focusExistingOrCreateNewCodeTab(o)},handleCopyMarkdownLink=e=>{const t=eventId(e),o=global.state.papers[t].md;copyAndConfirmMemoryItem(t,o,"Markdown link copied!")},handleCopyBibtex=e=>{const t=eventId(e),o=global.state.papers[t].bibtex;copyAndConfirmMemoryItem(t,formatBibtext(o),"Bibtex copied!")},handleCopyPDFLink=e=>{const t=eventId(e),o=global.state.papers[t].pdfLink;copyAndConfirmMemoryItem(t,o,"Pdf link copied!")},handleAddItemToFavorites=e=>{const t=eventId(e),o=hasClass(`memory-container--${t}`,"favorite");saveFavoriteItem(t,!o)},handleTextareaFocus=()=>{var e=this;textareaFocusEnd(e)},handleMemorySaveEdits=e=>{e.preventDefault();const t=eventId(e),{note:o,codeLink:a}=getPaperEdits(t);saveNote(t,o),saveCodeLink(t,a),updatePaperTags(t,"memory-item-tags"),dispatch(findEl(t,"memory-item-edit"),"click"),disable(findEl(t,"memory-item-save-edits"))},handleCancelPaperEdit=e=>{e.preventDefault();const t=eventId(e),o=global.state.papers[t];val(findEl(t,"form-note-textarea"),o.note),setHTML(findEl(t,"memory-item-tags"),getTagsOptions(o)),dispatch(findEl(t,"memory-item-edit"),"click"),disable(findEl(t,"memory-item-save-edits"))},handleTogglePaperEdit=e=>{e.preventDefault();const t=eventId(e),o=findEl(`memory-container--${t}`),a=findEl(t,"code-and-note"),s=findEl(t,"extended-item"),n=findEl(t,"tag-list"),r=findEl(t,"memory-authors"),i=findEl(t,"edit-tags"),l=findEl(t,"memory-item-actions"),d=$(findEl(t,"memory-item-tags"));hasClass(o,"expand-open")?(removeClass(o,"expand-open"),slideDown(a,150),slideDown(n,150),slideDown(l,150),slideDown(r,150),slideUp(s,150),slideUp(i,150),setTimeout(()=>{d.select2("destroy")},500)):(addClass(o,"expand-open"),d.select2({...global.select2Options,width:"86%"}),hasClass(o,"has-monitoring")||d.on("change",monitorPaperEdits(t,!1)),o.classList.add("has-monitoring"),slideUp(a,150),slideUp(n,150),slideUp(l,150),slideUp(r,150),slideDown(s,150),slideDown(i,150))},handleMemorySelectChange=e=>{const t=e.target.value;global.state.sortKey=t,sortMemory(),displayMemoryTable(),setMemorySortArrow("down")},handleMemorySortArrow=e=>{"memory-sort-arrow-down"===document.querySelector("#memory-sort-arrow svg").id?setMemorySortArrow("up"):setMemorySortArrow("down"),reverseMemory(),displayMemoryTable()},handleFilterFavorites=()=>{const e=!global.state.showFavorites;if(global.state.showFavorites=e,e){addClass(findEl("filter-favorites").querySelector("svg"),"favorite"),sortMemory(),global.state.papersList=global.state.papersList.filter(e=>e.favorite),displayMemoryTable(),setMemorySortArrow("down"),findEl("memory-select").innerHTML+='<option value="favoriteDate">Last favoured</option>';const e=global.state.papersList.length;setPlaceholder("memory-search",`Search ${e} entries...`)}else{removeClass(findEl("filter-favorites").querySelector("svg"),"favorite"),"favoriteDate"===val("memory-select")&&(val("memory-select","lastOpenDate"),global.state.sortKey="lastOpenDate"),document.querySelector('#memory-select option[value="favoriteDate"]').remove(),sortMemory(),setMemorySortArrow("down"),val("memory-search").trim()?dispatch("memory-search","keypress"):(global.state.papersList=global.state.sortedPapers,displayMemoryTable());const e=global.state.sortedPapers.length;setPlaceholder("memory-search",`Search ${e} entries...`)}},handleMemorySearchKeyPress=e=>t=>{const o=val("memory-search").trim();o||setTimeout(()=>{style("memory-search-clear-icon","visibility","hidden")},0),(o||e||"Backspace"===t.key)&&(style("memory-search-clear-icon","visibility","visible"),o.startsWith("t:")?filterMemoryByTags(o):o.startsWith("c:")?filterMemoryByCode(o):filterMemoryByString(o),displayMemoryTable())},handleMemorySearchKeyUp=e=>{if("Backspace"==e.key){var t=new Event("keypress");t.key="Backspace",dispatch("memory-search",t)}},handleCancelModalClick=()=>{hideId("confirm-modal")},handleConfirmDeleteModalClick=e=>{const t=findEl("hidden-modal-id").innerHTML,o=global.state.papers[t].title,a=global.state.papers[t].pdfLink;delete global.state.papers[t],chrome.storage.local.set({papers:global.state.papers},()=>{global.state.papersList=Object.values(cleanPapers(global.state.papers)),sortMemory(),displayMemoryTable(),hideId("confirm-modal"),console.log(`Successfully deleted "${o}" (${t}) from PaperMemory`),global.state.currentId===t&&updatePopupPaperNoMemory(a),setPlaceholder("memory-search",`Search ${global.state.papersList.length} entries ...`),addListener("memory-switch","click",handleMemorySwitchClick)})},handleTagClick=e=>{const t=e.target,o=t.textContent;val("memory-search",`t: ${o}`),dispatch("memory-search","keypress")},handleClearSearch=e=>{val("memory-search",""),dispatch("memory-search","clear-search"),style("memory-search-clear-icon","visibility","hidden")},handleMemorySwitchClick=()=>{global.state.memoryIsOpen?closeMemory():openMemory()},handlePopupKeydown=e=>{const t=e.key;if(["Backspace","Enter","Escape","a","e"].indexOf(t)<0)return;if(global.state.menuIsOpen){if("Escape"===t)e.preventDefault(),closeMenu();else if("Enter"===t){let e=document.querySelector("#menu-switch:focus");e&&closeMenu()}return}if(!global.state.memoryIsOpen){if("a"===t){const e=document.querySelectorAll(":focus");if(e&&e.length&&Array.from(e).some(e=>hasClass(e,"noMemoryOnA")))return;global.state.papers&&dispatch("memory-switch","click")}else if("Enter"===t){let e=document.querySelector(":focus");"memory-switch-open"===e.id?dispatch("memory-switch","click"):"menu-switch"===e.id?(dispatch("menu-switch","click"),dispatch("menu-switch","blur")):hasClass(e,"memory-item-svg-div")&&dispatch(e,"click")}return}if("Enter"===t){const e=document.querySelector("#filter-favorites:focus");if(e)return void dispatch("filter-favorites","click");const o=document.querySelector("#memory-sort-arrow:focus");if(o&&"Enter"===t)return void dispatch("memory-sort-arrow","click")}let o;const a=document.querySelector(".memory-container:focus");if("Escape"!==t){if(!a)return;o=a.id.split("--")[1]}"Backspace"===t?dispatch(findEl(o,"memory-delete"),"click"):"Enter"===t?dispatch(findEl(o,"memory-item-link"),"click"):"Escape"===t?(e.preventDefault(),a&&hasClass(a,"expand-open")?handleTogglePaperEdit(e):closeMemory()):"e"===t&&dispatch(findEl(o,"memory-item-edit"),"click")},handleMenuCheckChange=e=>{const t=e.target.id,o=findEl(t).checked;chrome.storage.local.set({[t]:o},function(){console.log(`Settings saved for ${t} (${o})`)})},handleDownloadMemoryClick=()=>{const e=new Date,t=e.toLocaleDateString().replaceAll("/","."),o=e.toLocaleTimeString().replaceAll(":",".");chrome.storage.local.get("papers",({papers:e})=>{const a=versionToSemantic(e.__dataVersion);downloadTextFile(JSON.stringify(e),`memory-data-${a}-${t}-${o}.json`,"text/json")})},handleDownloadBibtexJsonClick=()=>{const e=new Date,t=e.toLocaleDateString().replaceAll("/","."),o=e.toLocaleTimeString().replaceAll(":",".");chrome.storage.local.get("papers",({papers:e})=>{const a=versionToSemantic(e.__dataVersion);delete e.__dataVersion;const s=Object.keys(e).reduce((t,o)=>(t[o]=formatBibtext(e[o].bibtex)||"",t),{});downloadTextFile(JSON.stringify(s),`memory-bibtex-${a}-${t}-${o}.json`,"text/json")})},handleDownloadBibtexPlainClick=()=>{const e=new Date,t=e.toLocaleDateString().replaceAll("/","."),o=e.toLocaleTimeString().replaceAll(":",".");chrome.storage.local.get("papers",({papers:e})=>{const a=versionToSemantic(e.__dataVersion);delete e.__dataVersion;const s=Object.values(e).map((e,t)=>{let o=e.bibtex;return o||(o="",console.log(e)),formatBibtext(o)}).join("\n");downloadTextFile(JSON.stringify(s),`memory-bibtex-${a}-${t}-${o}.bib`,"text/plain")})},handleSelectOverwriteFile=()=>{var e=document.getElementById("overwrite-arxivmemory-input").files;!e||e.length<1||(e=e[0],setHTML("overwrite-file-name",e.name),e.name.endsWith(".json")&&(findEl("overwrite-arxivmemory-button").disabled=!1))},handleOverwriteMemory=()=>{var e=document.getElementById("overwrite-arxivmemory-input").files;if(e&&!(e.length<1)){e=e[0];var t=new FileReader;t.onload=function(e){try{const t=JSON.parse(e.target.result);showId("overwriteFeedback"),setHTML("overwriteFeedback",'<div class="arxivTools-container"><div class="sk-folding-cube"><div class="sk-cube1 sk-cube"></div><div class="sk-cube2 sk-cube"></div><div class="sk-cube4 sk-cube"></div><div class="sk-cube3 sk-cube"></div></div></div>');const o='<button id="confirm-overwrite">Confirm</button>',a='<button id="cancel-overwrite">Cancel</button>',s='<h4 class="w-100 code-font" style="font-size: 0.9rem;>Be careful, you will not be able to revert this operation. Make sure you have downloaded a backup of your memory before overwriting it.</h4>',n=`<div id="overwrite-buttons" class="flex-center-evenly py-3 px-4"> ${s} <div class="flex-center-evenly w-100">${a} ${o}</div></div>`;setTimeout(async()=>{const{success:e,message:o,warning:a,papersToWrite:s}=await overwriteMemory(t);if(e){if(a){const e=(a.match(/<br\/>/g)||[]).length;setHTML("overwriteFeedback",`<h5 class="errorTitle">Done with ${e} warnings. Confirm overwrite?</h5>${a}${n}`)}else style("overwriteFeedback","text-align","center"),setHTML("overwriteFeedback",`<h5 class="mb-0">Data seems valid. Confirm overwrite?</h5>${n}`);addListener("confirm-overwrite","click",handleConfirmOverwrite(s,a)),addListener("cancel-overwrite","click",handleCancelOverwrite)}else setHTML("overwriteFeedback",o)},1500)}catch(e){setHTML("overwriteFeedback",`<br/><strong>Error:</strong><br/>${stringifyError(e)}`)}},t.readAsText(e)}},handleConfirmOverwrite=(e,t)=>o=>{setHTML("overwriteFeedback",'<div class="arxivTools-container"><div class="sk-folding-cube"><div class="sk-cube1 sk-cube"></div><div class="sk-cube2 sk-cube"></div><div class="sk-cube4 sk-cube"></div><div class="sk-cube3 sk-cube"></div></div></div>'),setTimeout(async()=>{if(t)for(const t in e)if(e.hasOwnProperty(t)&&!t.startsWith("__")){const{paper:o,warnings:a}=validatePaper(e[t],!1);e[t]=o,console.log(a)}await setStorage("papers",e),setHTML("overwriteFeedback","<h4>Memory overwritten. Close & Re-open the extension for the update to be effective.</h4>"),val("overwrite-arxivmemory-input","")},700)},handleCancelOverwrite=e=>{hideId("overwriteFeedback"),setHTML("overwriteFeedback",""),val("overwrite-arxivmemory-input","")},handleCustomPDFFunctionSave=()=>{const code=val("customPdfTitleTextarea").trim();try{const fn=eval(code),tested=fn("test","1.2");if("string"!=typeof tested)throw Error("Custom function returns the wrong type:",typeof tested,tested);const savedFeedback='<span style="color: green">Saved!</span>';setHTML("customPdfFeedback",savedFeedback),chrome.storage.local.set({pdfTitleFn:code}),global.state.pdfTitleFn=fn,setTimeout(()=>{setHTML("customPdfFeedback","")},1e3)}catch(e){console.log("setAndHandleCustomPDFFunction error:");const t=`<span style="color: red">${e}</span>`;savedFeedback("customPdfFeedback",t)}},handleDefaultPDFFunctionClick=()=>{const e=defaultPDFTitleFn.toString(),t='<span style="color: var(--green)">Saved!</span>';chrome.storage.local.set({pdfTitleFn:e}),global.state.pdfTitleFn=defaultPDFTitleFn,val("customPdfTitleTextarea",e),setHTML("customPdfFeedback",t),setTimeout(()=>{setHTML("customPdfFeedback","")},1e3)},handlePopupSaveEdits=e=>()=>{const{note:t,codeLink:o,favorite:a}=getPaperEdits(e,!0);updatePaperTags(e,`#popup-item-tags--${e}`),saveNote(e,t),saveCodeLink(e,o),saveFavoriteItem(e,a),setHTML("popup-feedback-copied","Saved tags, code, note & favorite!"),fadeIn("popup-feedback-copied"),setTimeout(()=>{fadeOut("popup-feedback-copied")},2e3),disable(`popup-save-edits--${e}`)},handlePopupDeletePaper=e=>()=>{showConfirmDeleteModal(e)},getTagsOptions=e=>{const t=new Set(e.tags);return Array.from(global.state.paperTags).sort().map((e,o)=>{let a=`<option value="${e}"`;return t.has(e)&&(a+=' selected="selected" '),a+`>${e}</option>`}).join("")},updateAllMemoryPaperTagOptions=()=>{for(const e in global.state.papers)if(global.state.papers.hasOwnProperty(e)&&"__dataVersion"!==e){const t=global.state.papers[e];setHTML(`memory-item-tags--${e}`,getTagsOptions(t))}},updatePopupPaperNoMemory=e=>{let t='\n    <div style="font-size: 1.5rem; width: 100%; text-align: center;">This paper is not in your memory</div>\n    <ul>It can be for one of 4 reasons:\n        <li style="margin-top: 4px">\n        On Firefox, content scripts are not triggered on pdfs.\n            <ul>\n            <li>This is not something I can do anything about, it\'s a known issue but a design choice by Firefox\'s developers.</li>\n            <li>The extension would work on the paper\'s <i>page</i> (for instance arxiv.org/<strong>abs</strong>/1106.0245)</li>\n            </ul>\n        </li>\n        <li style="margin-top: 4px">You deleted the paper (refresh the page to add it back)</li>\n        <li style="margin-top: 4px">There was an error parsing the paper\'s data (you can check the console if you think this is an issue)</li>\n        <li style="margin-top: 4px">You are actually not on a paper page but the extension made a mistake</li>\n        <p style="font-size: 0.9rem">Open an issue on <a href="https://github.com/vict0rsch/PaperMemory/issues">Github</a> if you think you encountered a malfunction.</p>\n    </ul>\n    ';navigator.userAgent.search("Firefox")>-1&&(t+='<div id="manual-firefox">Try manual trigger</div>');const o=findEl("isArxiv").innerHTML;setHTML("isArxiv",t),navigator.userAgent.search("Firefox")>-1&&addListener("manual-firefox","click",async()=>{const t=isPaper(e),{paper:a}=await addOrUpdatePaper(e,t);console.log("paper: ",a),console.log("previousIsArxiv: ",o),console.log("url: ",e);const s=Object.values(t).some(e=>e);console.log("isKnownPage: ",s),a&&(setHTML("isArxiv",o),popupMain(e,s,!0))})},showConfirmDeleteModal=e=>{const t=global.state.papers[e].title;setTextId("delete-modal-title",t),setHTML("hidden-modal-id",e),showId("confirm-modal","flex")},copyAndConfirmMemoryItem=(e,t,o,a)=>{copyTextToClipboard(t);const s=a?findEl("popup-feedback-copied"):findEl(e,"memory-item-feedback");s&&(s.innerText=o,$(s).fadeIn(),setTimeout(()=>{$(s).fadeOut()},2e3))},focusExistingOrCreateNewCodeTab=e=>{const{origin:t}=new URL(e);chrome.tabs.query({url:`${t}/*`},t=>{for(const o of t)if(o.url.includes(e)){const e={active:!0},t={focused:!0};return void chrome.windows.getCurrent(a=>{a.id!==o.windowId?chrome.windows.update(o.windowId,t,()=>{chrome.tabs.update(o.id,e)}):chrome.tabs.update(o.id,e)})}chrome.tabs.create({url:e})})},focusExistingOrCreateNewPaperTab=e=>{const t=parseUrl(e.pdfLink).hostname;let o=e.pdfLink.split("/").reverse()[0].replace("-Paper.pdf","").replace(".pdf","").split("?").reverse()[0];"biorxiv"===e.source&&(o=cleanBiorxivURL(e.pdfLink)),o.match(/\d{5}v\d+$/)&&"arxiv"===e.source&&(o=o.split("v")[0]),chrome.tabs.query({url:`*://${t}/*`},t=>{let a=[],s=[];const n=t.map(e=>e.url);let r=0;for(const e of n)e.indexOf(o)>=0&&(a.push(r),e.endsWith(".pdf")&&s.push(r)),r+=1;if(a.length>0){let e;e=s.length>0?t[s[0]]:t[a[0]];const o={active:!0},n={focused:!0};chrome.windows.getCurrent(t=>{t.id!==e.windowId?chrome.windows.update(e.windowId,n,()=>{chrome.tabs.update(e.id,o)}):chrome.tabs.update(e.id,o)})}else chrome.tabs.create({url:e.pdfLink});global.state.papers[e.id].count+=1,chrome.storage.local.set({papers:global.state.papers})})},saveNote=(e,t)=>{t=t.trim(),global.state.papers[e].note=t,chrome.storage.local.set({papers:global.state.papers},()=>{setHTML(findEl(e,"memory-note-div"),t?`\n                <div class="memory-note-div memory-item-faded">\n                    <span class="note-content-header">Note:</span>\n                    <span class="note-content">${t}</span>\n                </div>`:'<div class="memory-note-div memory-item-faded"></div>');const o=findEl(`popup-form-note-textarea--${e}`);val(o,t),val(findEl(e,"form-note-textarea"),t)})},saveCodeLink=(e,t)=>{t=t.trim(),global.state.papers[e].codeLink=t,chrome.storage.local.set({papers:global.state.papers},()=>{setHTML(findEl(e,"memory-code-link"),t),setHTML("popup-code-link",t),val(findEl(e,"form-code-input"),t),t?showId("popup-code-link"):hideId("popup-code-link");const o=findEl(`popup-form-codeLink--${e}`);val(o,t)})},saveFavoriteItem=(e,t)=>{global.state.papers[e].favorite=t,global.state.papers[e].favoriteDate=(new Date).toJSON(),chrome.storage.local.set({papers:global.state.papers},()=>{if(t?(addClass(`memory-container--${e}`,"favorite"),addClass(findEl(e,"memory-item-favorite").querySelector("svg"),"favorite")):(removeClass(`memory-container--${e}`,"favorite"),removeClass(findEl(e,"memory-item-favorite").querySelector("svg"),"favorite")),"favoriteDate"===global.state.sortKey){t||(sortMemory(),displayMemoryTable());const e=global.state.sortedPapers.filter(e=>e.favorite).length,o=findEl("memory-search");o&&setPlaceholder(o,`Search ${e} entries`)}let o=findEl(`checkFavorite--${e}`);o&&(o.checked=t)})},setMemorySortArrow=e=>{let t;t="up"===e?'<svg viewBox="0 0 24 24" class="memory-sort-arrow-svg" id="memory-sort-arrow-up">\n            <path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="12" y1="5" x2="12" y2="19" />\n            <line x1="16" y1="9" x2="12" y2="5" /><line x1="8" y1="9" x2="12" y2="5" /></svg>':'<svg class="memory-sort-arrow-svg" id="memory-sort-arrow-down" viewBox="0 0 24 24">\n            <path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="12" y1="5" x2="12" y2="19" />\n            <line x1="16" y1="15" x2="12" y2="19" /><line x1="8" y1="15" x2="12" y2="19" /></svg>',setHTML("memory-sort-arrow",t)},orderPapers=(e,t)=>{let o=e[global.state.sortKey],a=t[global.state.sortKey];return void 0===o&&(o=""),void 0===a&&(a=""),"string"==typeof o&&(o=o.toLowerCase(),a=a.toLowerCase()),global.descendingSortKeys.indexOf(global.state.sortKey)>=0?o>a?-1:1:o>a?1:-1},sortMemory=()=>{global.state.sortedPapers=Object.values(cleanPapers(global.state.papers)),global.state.sortedPapers.sort(orderPapers),global.state.papersList.sort(orderPapers)},reverseMemory=()=>{global.state.sortedPapers.reverse(),global.state.papersList.reverse()},filterMemoryByString=e=>{const t=e.split(" ");let o=[];for(const e of global.state.sortedPapers){const a=e.title.toLowerCase(),s=e.author.toLowerCase(),n=e.note.toLowerCase(),r=getDisplayId(e.id).toLowerCase();t.every(e=>a.includes(e)||s.includes(e)||n.includes(e)||r.includes(e))&&(global.state.showFavorites&&!e.favorite||o.push(e))}global.state.papersList=o},filterMemoryByTags=e=>{const t=e.replace("t:","").toLowerCase().split(" ");let o=[];for(const e of global.state.sortedPapers){const a=e.tags.map(e=>e.toLowerCase());t.every(e=>a.some(t=>t.indexOf(e)>=0))&&(global.state.showFavorites&&!e.favorite||o.push(e))}global.state.papersList=o},filterMemoryByCode=e=>{const t=e.replace("c:","").toLowerCase().split(" ");let o=[];for(const e of global.state.sortedPapers){let a=e.codeLink||"";a=a.toLowerCase(),t.every(e=>a.includes(e))&&(global.state.showFavorites&&!e.favorite||o.push(e))}global.state.papersList=o},updatePaperTagsHTML=e=>{setHTML(findEl(e,"tag-list"),global.state.papers[e].tags.map(e=>`<span class="memory-tag">${e}</span>`).join(""))},updateTagOptions=e=>{updateAllMemoryPaperTagOptions();const t=getTagsOptions(global.state.papers[e]);setHTML(`popup-item-tags--${e}`,t)},updatePaperTags=(e,t)=>{let o;o=t.startsWith("#")?findEl(t.replace("#","")):findEl(e,t);const a=parseTags(o);updated=!1;new Set;arraysIdentical(global.state.papers[e].tags,a)||(updated=!0),global.state.papers[e].tags=a,updated&&chrome.storage.local.set({papers:global.state.papers},()=>{makeTags(),updateTagOptions(e),updatePaperTagsHTML(e);const t=Array.from(findEl(e,"tag-list").querySelectorAll(".memory-tag"));for(const e of t)addListener(e,"click",handleTagClick)})},makeTags=()=>{let e=new Set;for(const t of global.state.sortedPapers)for(const o of t.tags)e.add(o);global.state.paperTags=Array.from(e),global.state.paperTags.sort()},displayMemoryTable=()=>{Date.now();var e=findEl("memory-table");setHTML(e,"");let t=[];for(const e of global.state.papersList)try{t.push(getMemoryItemHTML(e))}catch(t){console.log("displayMemoryTable error:"),console.log(t),console.log(e)}setHTML(e,t.join(""));Date.now();addEventToClass(".back-to-focus","click",handleBackToFocus),addEventToClass(".memory-delete","click",handleDeleteItem),addEventToClass(".memory-item-link","click",handleOpenItemLink),addEventToClass(".memory-code-link","click",handleOpenItemCodeLink),addEventToClass(".memory-item-md","click",handleCopyMarkdownLink),addEventToClass(".memory-item-bibtex","click",handleCopyBibtex),addEventToClass(".memory-item-copy-link","click",handleCopyPDFLink),addEventToClass(".memory-item-favorite","click",handleAddItemToFavorites),addEventToClass(".cancel-note-form","click",handleCancelPaperEdit),addEventToClass(".memory-item-edit","click",handleTogglePaperEdit),addEventToClass(".memory-tag","click",handleTagClick),setFormChangeListener(void 0,!1),addEventToClass(".form-note-textarea","focus",handleTextareaFocus),addEventToClass(".form-note","submit",handleMemorySaveEdits);Date.now()},makeMemoryHTML=async()=>{const e=Date.now()/1e3;setPlaceholder("memory-search",`Search ${global.state.papersList.length} entries ...`);const t=Date.now()/1e3;displayMemoryTable();let o=300;global.state.papersList.length<20?o=0:global.state.papersList.length<100&&(o=150);const a=Date.now()/1e3;console.log("Time to display table (s):"+(a-t)),addListener("memory-search","keypress",delay(handleMemorySearchKeyPress(),o)),addListener("memory-search","clear-search",handleMemorySearchKeyPress(!0)),addListener("memory-search","keyup",handleMemorySearchKeyUp),addListener("cancel-modal-button","click",handleCancelModalClick),addListener("confirm-modal-button","click",handleConfirmDeleteModalClick),addListener("filter-favorites","click",handleFilterFavorites),addListener("memory-select","change",handleMemorySelectChange),addListener("memory-sort-arrow","click",handleMemorySortArrow);const s=Date.now()/1e3;console.log("Time to add events listeners (s):"+(s-a)),console.log("Total time to make (async) (s):"+(s-e))},openMemory=()=>{global.state.menuIsOpen&&closeMenu(),global.state.memoryIsOpen=!0,hideId("memory-switch-open"),showId("memory-switch-close"),hideId("menu-switch"),dispatch("memory-switch","blur"),slideDown("memory-container",200,()=>{setTimeout(()=>{dispatch("memory-search","focus")},100)}),setTimeout(()=>{addListener("memory-search-clear-icon","click",handleClearSearch),val("memory-select","lastOpenDate"),setMemorySortArrow("down")},200)},closeMemory=()=>{dispatch("memory-switch","blur"),hideId("memory-switch-close"),showId("memory-switch-open"),slideUp("memory-container",200,()=>{val("memory-search",""),dispatch("memory-search","clear-search"),global.state.memoryIsOpen=!1,global.state.showFavorites&&dispatch("filter-favorites","click"),showId("menu-switch","flex")})},closeMenu=()=>{let e=["tabler-icon","menu-svg"];slideUp("menu-container",300),setHTML("menu-switch",tablerSvg("settings","menu-switch-svg",e)),dispatch("menu-switch","blur"),global.state.menuIsOpen=!1},openMenu=()=>{let e=["tabler-icon","menu-svg"];slideDown("menu-container",300),dispatch("menu-switch","blur"),setHTML("menu-switch",tablerSvg("circle-x","close-menu-btn",e)),global.state.menuIsOpen=!0},getAndTrackPopupMenuChecks=(e,t)=>{let o={};for(const a of t){o[a]=e.hasOwnProperty(a)?e[a]:!(global.menuCheckDefaultFalse.indexOf(a)>=0);const t=findEl(a);t&&(t.checked=o[a])}chrome.storage.local.set(o);for(const e of t)addListener(e,"change",handleMenuCheckChange)},setStandardPopupClicks=()=>{addListener("helpGithubLink","click",()=>{chrome.tabs.create({url:"https://github.com/vict0rsch/PaperMemory"})}),addListener("keyboardShortcuts","click",()=>{style("user-guide-modal","display","flex")}),addListener("keyboardShortcutsMenu","click",()=>{style("user-guide-modal","display","flex")}),addListener("close-user-guide-modal","click",()=>{style("user-guide-modal","display","none")}),addListener(window,"click",e=>{e.target===findEl("user-guide-modal")&&style("user-guide-modal","display","none")}),addListener("menu-switch","click",()=>{global.state.menuIsOpen?closeMenu():openMenu()}),addListener("memory-switch","click",handleMemorySwitchClick),addListener("download-arxivmemory","click",handleDownloadMemoryClick),addListener("download-bibtex-json","click",handleDownloadBibtexJsonClick),addListener("download-bibtex-plain","click",handleDownloadBibtexPlainClick),addListener("overwrite-arxivmemory-button","click",handleOverwriteMemory),addListener("overwrite-arxivmemory-input","change",handleSelectOverwriteFile)},setAndHandleCustomPDFFunction=e=>{e.pdfTitleFn&&"string"==typeof e.pdfTitleFn&&(global.state.pdfTitleFn=getPdfFn(e.pdfTitleFn)),chrome.storage.local.set({pdfTitleFn:global.state.pdfTitleFn.toString()}),val("customPdfTitleTextarea",global.state.pdfTitleFn.toString()),addListener("saveCustomPdf","click",handleCustomPDFFunctionSave),addListener("defaultCustomPdf","click",handleDefaultPDFFunctionClick)},popupMain=async(e,t,o=!1)=>{addListener(document,"keydown",handlePopupKeydown),o?(hideId("memory-switch"),showId("memory-spinner"),await initState(),hideId("memory-spinner"),showId("memory-switch"),makeMemoryHTML()):setStandardPopupClicks();const a=await getStorage(global.menuStorageKeys);if(getAndTrackPopupMenuChecks(a,global.menuCheckNames),setAndHandleCustomPDFFunction(a),t){setTimeout(()=>{document.body.style.height="auto",document.body.style.minHeight="450px"},0),showId("isArxiv","flex");const t=parseIdFromUrl(e);if(global.state.currentId=t,!global.state.papers.hasOwnProperty(t))return console.log("Unknown id "+t),updatePopupPaperNoMemory(e),void(a.checkDirectOpen&&dispatchEvent("memory-switch","click"));const o=global.state.papers[t],s=o.id.replaceAll(".","\\.");setTextId("popup-paper-title",o.title.replaceAll("\n","")),setTextId("popup-authors",o.author.replaceAll(" and ",", ")),o.codeLink&&(showId("popup-code-link"),setTextId("popup-code-link",o.codeLink)),console.log(o),setHTML("popup-memory-edit",getPopupEditFormHTML(o)),setHTML("popup-copy-icons",getPopupPaperIconsHTML(o,e)),findEl(`checkFavorite--${t}`).checked=o.favorite,$(`#popup-item-tags--${s}`).select2({...global.select2Options,width:"87%"}),addListener(`popup-form-note-textarea--${t}`,"focus",()=>{var e=this;textareaFocusEnd(e)}),setFormChangeListener(t,!0),addListener(`popup-save-edits--${t}`,"click",handlePopupSaveEdits(t)),addListener("popup-delete-paper","click",handlePopupDeletePaper(t)),addListener(`popup-memory-item-link--${t}`,"click",()=>{chrome.tabs.update({url:paperToPDF(o)===e?paperToAbs(o):paperToPDF(o)}),window.close()}),addListener("popup-code-link","click",()=>{const e=findEl("popup-code-link").textContent;e&&focusExistingOrCreateNewCodeTab(e)}),addListener(`popup-memory-item-copy-link--${t}`,"click",()=>{const e=global.state.papers[t].pdfLink;copyAndConfirmMemoryItem(t,e,"Pdf link copied!",!0)}),addListener(`popup-memory-item-md--${t}`,"click",()=>{const e=global.state.papers[t].md;copyAndConfirmMemoryItem(t,e,"MarkDown link copied!",!0)}),addListener(`popup-memory-item-bibtex--${t}`,"click",()=>{const e=formatBibtext(global.state.papers[t].bibtex);copyAndConfirmMemoryItem(t,e,"Bibtex citation copied!",!0)}),addListener(`popup-memory-item-download--${t}`,"click",()=>{let e=statePdfTitle(o.title,o.id);console.log({pdfTitle:e}),chrome.downloads.download({url:o.pdfLink,filename:e.replaceAll(":","_")})})}else a.checkDirectOpen&&dispatch("memory-switch","click")},query={active:!0,lastFocusedWindow:!0};chrome.tabs.query(query,async e=>{const t=e[0].url,o=isPaper(t),a=Object.values(o).some(e=>e);a||showId("notArxiv"),await initState(),hideId("memory-spinner"),showId("memory-switch"),makeMemoryHTML(),popupMain(t,a),navigator.userAgent.search("Firefox")>-1&&hideId("overwrite-container")});const getMemoryItemHTML=e=>{const t=new Date(e.addDate).toLocaleString().replace(",",""),o=new Date(e.lastOpenDate).toLocaleString().replace(",",""),a=getDisplayId(e.id),s=e.note||"",n=e.id,r=new Set(e.tags),i=getTagsOptions(e),l=e.favorite?"favorite":"",d={edit:"\"Edit paper details&#13;&#10;(or press 'e' when this paper is focused,&#13;&#10; i.e. when you navigated to it with 'tab')\"",pdfLink:`"Open ${e.pdfLink}"`,copyPdfLink:'"Copy pdf link"',copyMd:'"Copy Markdown-formatted link"',copyBibtext:'"Copy Bibtex citation"',visits:'"Number of times you have loaded&#13;&#10;the paper\'s Page or PDF"'};let c=`\n    <small class="memory-item-faded">\n        <span \n            class="memory-code-link" \n        >\n            ${e.codeLink||""}\n        </span>\n    </small>\n    `,p='<div class="memory-note-div memory-item-faded"></div>';return e.note&&(p=`\n        <div class="memory-note-div memory-item-faded">\n            <span class="note-content-header">Note:</span>\n            <span class="note-content">${s}</span>\n        </div>\n        `),
`\n    <div \n        class="memory-container ${l}" \n        tabindex="0" \n        id="memory-container--${n}" \n    >\n\n        <h4 \n            class="memory-title" \n            title="Added ${t}&#13;&#10;Last open ${o}" \n        >\n                <span class="memory-item-favorite">\n                    ${tablerSvg("star","",["memory-item-favorite-svg",l])}\n                </span>\n                ${e.title}\n        </h4>\n        <div class="my-1 mx-0">\n            <small class="tag-list">\n                ${Array.from(r).map(e=>`<span class="memory-tag" >${e}</span>`).join("")}\n            </small>\n            <div class="edit-tags p-0" style="display: none">\n                <div class="flex-center-between">\n                <span class="label">Tags:</span>\n                <select class="memory-item-tags" id="memory-item-tags--${n}" multiple="multiple">\n                        ${i}\n                    </select>\n                </div>\n            </div>\n        </div>\n        <small class="memory-authors">${cutAuthors(e.author)}</small>\n        \n        <div class="code-and-note">\n            ${c}\n            ${p}\n        </div>\n\n        <div class="memory-item-actions flex-center-between mt-2">\n\n            <div class="d-flex align-items-center">\n                <div class="memory-item-edit memory-item-svg-div me-2" title=${d.edit} >\n                    ${tablerSvg("writing","",["memory-icon-svg"])}\n                </div>\n                \n                <small class="memory-item-faded memory-display-id">\n                        ${a}\n                </small>\n                        \n            </div>\n\n            <div class="memory-item-link memory-item-svg-div"  title=${d.pdfLink} >\n                ${tablerSvg("file-symlink","",["memory-icon-svg"])}\n            </div>\n                \n            <div \n                class="memory-item-copy-link memory-item-svg-div" \n                title=${d.copyPdfLink} \n            >\n                ${tablerSvg("link","",["memory-icon-svg"])}\n            </div>\n\n            <div class="memory-item-md memory-item-svg-div" title=${d.copyMd} >\n                ${tablerSvg("clipboard-list","",["memory-icon-svg"])}\n            </div>\n\n            <div \n                class="memory-item-bibtex memory-item-svg-div" \n                title=${d.copyBibtext}\n            >\n                ${tablerSvg("archive","",["memory-icon-svg"])}\n            </div>\n\n            <span style="display: none" class="memory-item-feedback"></span>\n            \n            <div title=${d.visits} class="memory-item-faded memory-visits">\n                Visits: ${e.count}\n            </div>\n\n        </div>\n\n        <div class="extended-item" style="display: none">\n            <div class="item-note">\n                <form class="form-note">\n                    <div class="flex-center-start">\n                        <span class="label">Code:</span>\n                        <input \n                            type="text" \n                            class="form-code-input" \n                            value="${e.codeLink||""}"\n                            placeholder="Add link"\n                        >\n                    </div>\n                    <div class="flex-center-start">\n                        <span class="label">Note:</span>\n                        <textarea \n                            rows="2" \n                            class="form-note-textarea"\n                            placeholder="Anything to note?"\n                        >${s}</textarea>\n                    </div>\n                    <div class="form-note-buttons">\n                        <button \n                            class="memory-item-save-edits" \n                            type="submit"\n                            disabled \n                        >\n                            Save\n                        </button>\n                        <button \n                            class="cancel-note-form back-to-focus" \n                        >\n                            Cancel\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n        <div class="memory-delete" title="Delete from Memory"> - </div>\n    </div>\n    `},getPopupEditFormHTML=e=>{const t=e.id,o=getTagsOptions(e),a=e.note||"",s="",n=getDisplayId(e.id);return`\n    <div style="max-width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 4px 16px;">\n        <div style="width: 100%">\n            <div style="width: 100%; display: flex; justify-content: space-between; align-items: center;">\n                <span class="label">Tags:</span>\n                <select id="popup-item-tags--${t}"class="memory-item-tags" multiple="multiple">\n                    ${o}\n                </select>\n            </div>\n            <div \n                class="form-note" \n                id="popup-form-note--${t}" \n                style="width: 100%; display: flex; justify-content: space-between; align-items: center; margin-top: 8px; flex-direction: column;"\n            >\n                <div class="flex-center-start w-100 mr-0">\n                    <span class="label">Code:</span>\n                    <input \n                        id="popup-form-codeLink--${t}" \n                        type="text" \n                        class="form-code-input mt-0 noMemoryOnA" \n                        value="${e.codeLink||""}"\n                        placeholder="Add link"\n                    >\n                </div>\n                <div class="flex-center-start w-100 mr-0">\n                    <span class="label">Note:</span>\n                    <textarea \n                        rows="2"  \n                        class="noMemoryOnA popup-form-note-textarea"\n                        id="popup-form-note-textarea--${t}"\n                        placeholder="Anything to note?"\n                    >${a}</textarea>\n                </div>\n            </div>\n            <div style="display: flex; justify-content: space-between; align-items: center">\n                <div style="display: flex; justify-content: flex-start; align-items: center">\n                    <label class="label" for="checkFavorite">Favorite: </label>\n                    <input ${s} class="switch" type="checkbox" id="checkFavorite--${t}" name="checkFavorite" value="checkFavorite">\n                </div>\n                <div id="popup-delete-paper" title="Delete paper from Memory">\n                    <svg width="25" height="25" viewBox="0 0 24 24" stroke-width="1" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke="white">\n                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>\n                        <line x1="4" y1="7" x2="20" y2="7" />\n                        <line x1="10" y1="11" x2="10" y2="17" />\n                        <line x1="14" y1="11" x2="14" y2="17" />\n                        <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />\n                        <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />\n                    </svg>\n                </div>\n                <small id="popup-displayId">\n                    ${n}\n                </small>\n                <button \n                    style="padding: 6px 16px;" \n                    disabled \n                    class="back-to-focus" \n                    id="popup-save-edits--${t}"\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    </div>`},getPopupPaperIconsHTML=(e,t)=>{const o=e.id,a=paperToAbs(e)===t?"HTML":"PDF";return`\n    <div\n        tabindex="0"\n        class="memory-item-svg-div" \n        id="popup-memory-item-link--${o}"\n        title="Open Paper ${a} Page"\n    >\n        ${tablerSvg("external-link","",["popup-click-svg"])}\n    </div>\n    <div \n        tabindex="0"\n        class="memory-item-svg-div"\n        id="popup-memory-item-copy-link--${o}"\n        title="Copy pdf link" \n    >\n        ${tablerSvg("link","",["popup-click-svg"])}\n    </div>\n\n    <div \n        tabindex="0"\n        class="memory-item-svg-div"\n        id="popup-memory-item-md--${o}"\n        title="Copy Markdown-formatted link" \n    >\n        ${tablerSvg("clipboard-list","",["popup-click-svg"])}\n    </div>\n\n    <div \n        tabindex="0"\n        class="memory-item-svg-div"\n        id="popup-memory-item-bibtex--${o}"\n        title="Copy Bibtex citation" \n    >\n        ${tablerSvg("archive","",["popup-click-svg"])}\n    </div>\n\n    <div \n        tabindex="0"\n        class="memory-item-svg-div"\n        id="popup-memory-item-download--${o}"\n        title="Download pdf" \n    >\n        ${tablerSvg("file-download","",["popup-click-svg"])}\n    </div>`};